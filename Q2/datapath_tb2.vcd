$date
	Thu Apr 17 23:49:33 2025
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module tb2 $end
$var wire 1 ! Zero $end
$var reg 3 " ALUControl [2:0] $end
$var reg 2 # addr1 [1:0] $end
$var reg 2 $ addr2 [1:0] $end
$var reg 2 % addr3 [1:0] $end
$var reg 1 & clk $end
$var reg 1 ' rst $end
$var reg 1 ( wr $end
$scope module D $end
$var wire 3 ) ALUControl [2:0] $end
$var wire 2 * addr1 [1:0] $end
$var wire 2 + addr2 [1:0] $end
$var wire 2 , addr3 [1:0] $end
$var wire 1 & clk $end
$var wire 1 ' rst $end
$var wire 1 ( wr $end
$var wire 32 - data2 [31:0] $end
$var wire 32 . data1 [31:0] $end
$var wire 32 / alu_result [31:0] $end
$var wire 1 ! Zero $end
$scope module alu_unit $end
$var wire 3 0 ALUControl [2:0] $end
$var wire 32 1 xorRes [31:0] $end
$var wire 32 2 subRes [31:0] $end
$var wire 32 3 sltRes [31:0] $end
$var wire 32 4 andRes [31:0] $end
$var wire 32 5 addRes [31:0] $end
$var wire 1 ! Zero $end
$var wire 32 6 B [31:0] $end
$var wire 32 7 A [31:0] $end
$var reg 32 8 Result [31:0] $end
$scope module _and $end
$var wire 32 9 Result [31:0] $end
$var wire 32 : B [31:0] $end
$var wire 32 ; A [31:0] $end
$upscope $end
$scope module _xor $end
$var wire 32 < Result [31:0] $end
$var wire 32 = B [31:0] $end
$var wire 32 > A [31:0] $end
$upscope $end
$scope module add $end
$var wire 32 ? Result [31:0] $end
$var wire 32 @ B [31:0] $end
$var wire 32 A A [31:0] $end
$upscope $end
$scope module slt $end
$var wire 1 B less_bit $end
$var wire 32 C Result [31:0] $end
$var wire 32 D B [31:0] $end
$var wire 32 E A [31:0] $end
$scope module ze $end
$var wire 1 B in $end
$var wire 32 F out [31:0] $end
$upscope $end
$upscope $end
$scope module sub $end
$var wire 32 G Result [31:0] $end
$var wire 32 H B [31:0] $end
$var wire 32 I A [31:0] $end
$upscope $end
$upscope $end
$scope module rf $end
$var wire 2 J addr1 [1:0] $end
$var wire 2 K addr2 [1:0] $end
$var wire 2 L addr3 [1:0] $end
$var wire 1 & clk $end
$var wire 32 M data1 [31:0] $end
$var wire 32 N data2 [31:0] $end
$var wire 32 O data3 [31:0] $end
$var wire 1 ' rst $end
$var wire 1 ( wr $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
$end
#0
$dumpvars
b0 O
bx N
bx M
bx L
bx K
bx J
bx I
bx H
bx G
b0x F
bx E
bx D
b0x C
xB
bx A
bx @
bx ?
bx >
bx =
bx <
bx ;
bx :
bx 9
b0 8
bx 7
bx 6
bx 5
bx 4
b0x 3
bx 2
bx 1
bx 0
b0 /
bx .
bx -
bx ,
bx +
bx *
bx )
0(
0'
0&
bx %
bx $
bx #
bx "
1!
$end
#5000
1&
#10000
b0 3
b0 C
b0 F
0B
b0 1
b0 <
b10011010101111001101111011110000 4
b10011010101111001101111011110000 9
0&
1(
b1 "
b1 )
b1 0
b1 %
b1 ,
b1 L
b0 2
b0 G
b110101011110011011110111100000 5
b110101011110011011110111100000 ?
b10011010101111001101111011110000 -
b10011010101111001101111011110000 6
b10011010101111001101111011110000 :
b10011010101111001101111011110000 =
b10011010101111001101111011110000 @
b10011010101111001101111011110000 D
b10011010101111001101111011110000 H
b10011010101111001101111011110000 N
b1 $
b1 +
b1 K
b10011010101111001101111011110000 .
b10011010101111001101111011110000 7
b10011010101111001101111011110000 ;
b10011010101111001101111011110000 >
b10011010101111001101111011110000 A
b10011010101111001101111011110000 E
b10011010101111001101111011110000 I
b10011010101111001101111011110000 M
b1 #
b1 *
b1 J
#15000
b0 4
b0 9
b0 .
b0 7
b0 ;
b0 >
b0 A
b0 E
b0 I
b0 M
b0 2
b0 G
b0 5
b0 ?
b0 -
b0 6
b0 :
b0 =
b0 @
b0 D
b0 H
b0 N
1&
#20000
0&
0(
#25000
1&
#30000
0&
#32000
0!
b11111111111111111111111111111111 /
b11111111111111111111111111111111 8
b11111111111111111111111111111111 O
b11111111111111111111111111111111 1
b11111111111111111111111111111111 <
1(
b0 "
b0 )
b0 0
b0 %
b0 ,
b0 L
b11111111111111111111111111111111 2
b11111111111111111111111111111111 G
b11111111111111111111111111111111 5
b11111111111111111111111111111111 ?
b11111111111111111111111111111111 .
b11111111111111111111111111111111 7
b11111111111111111111111111111111 ;
b11111111111111111111111111111111 >
b11111111111111111111111111111111 A
b11111111111111111111111111111111 E
b11111111111111111111111111111111 I
b11111111111111111111111111111111 M
b10 #
b10 *
b10 J
#35000
1&
#40000
0&
#42000
0(
#45000
1&
#50000
0&
#54000
b1 3
b1 C
b1 F
1B
b1 1
b1 <
1(
b1 "
b1 )
b1 0
b10 %
b10 ,
b10 L
b1 -
b1 6
b1 :
b1 =
b1 @
b1 D
b1 H
b1 N
b11 $
b11 +
b11 K
b11111111111111111111111111111111 2
b11111111111111111111111111111111 G
b1 5
b1 ?
b0 .
b0 7
b0 ;
b0 >
b0 A
b0 E
b0 I
b0 M
b1 #
b1 *
b1 J
#55000
1&
#60000
0&
#64000
0(
#65000
1&
#70000
0&
#75000
1&
#76000
b0 3
b0 C
b0 F
0B
1!
b0 /
b0 8
b0 O
b11111111111111111111111111111110 1
b11111111111111111111111111111110 <
b1 4
b1 9
1(
b0 "
b0 )
b0 0
b11 %
b11 ,
b11 L
b11111111111111111111111111111110 2
b11111111111111111111111111111110 G
b0 5
b0 ?
b11111111111111111111111111111111 .
b11111111111111111111111111111111 7
b11111111111111111111111111111111 ;
b11111111111111111111111111111111 >
b11111111111111111111111111111111 A
b11111111111111111111111111111111 E
b11111111111111111111111111111111 I
b11111111111111111111111111111111 M
b0 #
b0 *
b0 J
#80000
0&
#85000
0!
b11111111111111111111111111111111 /
b11111111111111111111111111111111 8
b11111111111111111111111111111111 O
b11111111111111111111111111111111 1
b11111111111111111111111111111111 <
b0 4
b0 9
b11111111111111111111111111111111 2
b11111111111111111111111111111111 G
b11111111111111111111111111111111 5
b11111111111111111111111111111111 ?
b0 -
b0 6
b0 :
b0 =
b0 @
b0 D
b0 H
b0 N
1&
#86000
0(
#88000
